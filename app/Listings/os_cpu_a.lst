


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           Generic ARM 
                       Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;
   14 00000000         ; For       : ARMv7M Cortex-M3
   15 00000000         ; Mode      : Thumb2
   16 00000000         ; Toolchain : RealView Development Suite
   17 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   18 00000000         ;             ARM Developer Suite (ADS)
   19 00000000         ;             Keil uVision
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   27 00000000                 EXTERN           OSPrioCur
   28 00000000                 EXTERN           OSPrioHighRdy
   29 00000000                 EXTERN           OSTCBCur
   30 00000000                 EXTERN           OSTCBHighRdy
   31 00000000                 EXTERN           OSIntNesting
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000         
   35 00000000         
   36 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   37 00000000                 EXPORT           OS_CPU_SR_Restore
   38 00000000                 EXPORT           OSStartHighRdy
   39 00000000                 EXPORT           OSCtxSw
   40 00000000                 EXPORT           OSIntCtxSw
   41 00000000                 EXPORT           OS_CPU_PendSVHandler
   42 00000000         
   43 00000000                 EXPORT           CPU_IntDis
   44 00000000                 EXPORT           CPU_IntEn
   45 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 2 


   46 00000000         ;                                                EQUATES
                       
   47 00000000         ;*******************************************************
                       *************************************************
   48 00000000         
   49 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   50 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   51 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   52 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   53 00000000         
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000         
   58 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   59 00000000                 THUMB
   60 00000000                 REQUIRE8
   61 00000000                 PRESERVE8
   62 00000000         ;*******************************************************
                       **************************************************
   63 00000000         ;                                    DISABLE and ENABLE 
                       INTERRUPTS
   64 00000000         ;
   65 00000000         ; Description : Disable/Enable interrupts.
   66 00000000         ;
   67 00000000         ; Prototypes  : void  CPU_IntDis(void);
   68 00000000         ;               void  CPU_IntEn (void);
   69 00000000         ;*******************************************************
                       **************************************************
   70 00000000         
   71 00000000         CPU_IntDis
   72 00000000 B672            CPSID            I
   73 00000002 4770            BX               LR
   74 00000004         
   75 00000004         
   76 00000004         CPU_IntEn
   77 00000004 B662            CPSIE            I
   78 00000006 4770            BX               LR
   79 00000008         
   80 00000008         ;*******************************************************
                       *************************************************
   81 00000008         ;                                   CRITICAL SECTION MET



ARM Macro Assembler    Page 3 


                       HOD 3 FUNCTIONS
   82 00000008         ;
   83 00000008         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   84 00000008         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   85 00000008         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   86 00000008         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   87 00000008         ;              into the CPU's status register.
   88 00000008         ;
   89 00000008         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   90 00000008         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   91 00000008         ;
   92 00000008         ;
   93 00000008         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   94 00000008         ;
   95 00000008         ;                 void Task (void *p_arg)
   96 00000008         ;                 {
   97 00000008         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   98 00000008         ;                     OS_CPU_SR  cpu_sr;
   99 00000008         ;                 #endif
  100 00000008         ;
  101 00000008         ;                          :
  102 00000008         ;                          :
  103 00000008         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  104 00000008         ;                          :
  105 00000008         ;                          :
  106 00000008         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  107 00000008         ;                          :
  108 00000008         ;                          :
  109 00000008         ;                 }
  110 00000008         ;*******************************************************
                       *************************************************
  111 00000008         
  112 00000008         OS_CPU_SR_Save
  113 00000008 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  114 0000000C B672            CPSID            I
  115 0000000E 4770            BX               LR
  116 00000010         
  117 00000010         OS_CPU_SR_Restore
  118 00000010 F380 8810       MSR              PRIMASK, R0
  119 00000014 4770            BX               LR
  120 00000016         
  121 00000016         ;*******************************************************
                       *************************************************
  122 00000016         ;                                          START MULTITA
                       SKING
  123 00000016         ;                                       void OSStartHigh
                       Rdy(void)
  124 00000016         ;



ARM Macro Assembler    Page 4 


  125 00000016         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  126 00000016         ;              the first task to start.
  127 00000016         ;
  128 00000016         ;           2) OSStartHighRdy() MUST:
  129 00000016         ;              a) Setup PendSV exception priority to low
                       est;
  130 00000016         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  131 00000016         ;              c) Set OSRunning to TRUE;
  132 00000016         ;              d) Trigger PendSV exception;
  133 00000016         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  134 00000016         ;*******************************************************
                       *************************************************
  135 00000016         
  136 00000016         OSStartHighRdy
  137 00000016 481D            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  138 00000018 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  139 0000001C 7001            STRB             R1, [R0]
  140 0000001E         
  141 0000001E 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  142 00000020 F380 8809       MSR              PSP, R0
  143 00000024         
  144 00000024 481A            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  145 00000026 2101            MOVS             R1, #1
  146 00000028 7001            STRB             R1, [R0]
  147 0000002A         
  148 0000002A 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  149 0000002C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  150 00000030 6001            STR              R1, [R0]
  151 00000032         
  152 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  153 00000034         
  154 00000034         OSStartHang
  155 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  156 00000036         
  157 00000036         
  158 00000036         ;*******************************************************
                       *************************************************
  159 00000036         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  160 00000036         ;                                           void OSCtxSw
                       (void)
  161 00000036         ;
  162 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  163 00000036         ;              triggers the PendSV exception which is wh



ARM Macro Assembler    Page 5 


                       ere the real work is done.
  164 00000036         ;*******************************************************
                       *************************************************
  165 00000036         
  166 00000036         OSCtxSw
  167 00000036 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  168 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  169 0000003C 6001            STR              R1, [R0]
  170 0000003E 4770            BX               LR
  171 00000040         
  172 00000040         ;*******************************************************
                       *************************************************
  173 00000040         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  174 00000040         ;                                         void OSIntCtxS
                       w(void)
  175 00000040         ;
  176 00000040         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  177 00000040         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  178 00000040         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  179 00000040         ;*******************************************************
                       *************************************************
  180 00000040         
  181 00000040         OSIntCtxSw
  182 00000040 4814            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  183 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  184 00000046 6001            STR              R1, [R0]
  185 00000048 4770            BX               LR
  186 0000004A         
  187 0000004A         ;*******************************************************
                       *************************************************
  188 0000004A         ;                                         HANDLE PendSV 
                       EXCEPTION
  189 0000004A         ;                                     void OS_CPU_PendSV
                       Handler(void)
  190 0000004A         ;
  191 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  192 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  193 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  194 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  195 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  196 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  197 0000004A         ;
  198 0000004A         ;           2) Pseudo-code is:



ARM Macro Assembler    Page 6 


  199 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  200 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  201 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  202 0000004A         ;              d) Call OSTaskSwHook();
  203 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  204 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  205 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  206 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  207 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  208 0000004A         ;
  209 0000004A         ;           3) On entry into PendSV handler:
  210 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  211 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  212 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  213 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  214 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  215 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  216 0000004A         ;
  217 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  218 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  219 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  220 0000004A         ;*******************************************************
                       *************************************************
  221 0000004A         
  222 0000004A         OS_CPU_PendSVHandler
  223 0000004A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  224 0000004C F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  225 00000050 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  226 00000052         
  227 00000052 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  228 00000054 E880 0FF0       STM              R0, {R4-R11}
  229 00000058         
  230 00000058 490F            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  231 0000005A 6809            LDR              R1, [R1]



ARM Macro Assembler    Page 7 


  232 0000005C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  233 0000005E         
  234 0000005E         ; At this point, entire context of process has been save
                       d
  235 0000005E         OS_CPU_PendSVHandler_nosave
  236 0000005E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  237 00000060 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  238 00000062 4780            BLX              R0
  239 00000064 F85D EB04       POP              {R14}
  240 00000068         
  241 00000068 480D            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  242 0000006A 490E            LDR              R1, =OSPrioHighRdy
  243 0000006C 780A            LDRB             R2, [R1]
  244 0000006E 7002            STRB             R2, [R0]
  245 00000070         
  246 00000070 4809            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  247 00000072 490D            LDR              R1, =OSTCBHighRdy
  248 00000074 680A            LDR              R2, [R1]
  249 00000076 6002            STR              R2, [R0]
  250 00000078         
  251 00000078 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  252 0000007A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  253 0000007E 3020            ADDS             R0, R0, #0x20
  254 00000080 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  255 00000084 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  256 00000088 B662            CPSIE            I
  257 0000008A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  258 0000008C         
  259 0000008C                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -ID:\software\install\
MDK-ARM\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\software\install\MDK
-ARM\Keil_v5\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --predefine="__U
VISION_VERSION SETA 533" --predefine="STM32F10X_HD SETA 1" --predefine="STM32F1
0X_HD SETA 1" --list=.\listings\os_cpu_a.lst ..\uCOS-II\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 58 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_IntDis 00000000

Symbol: CPU_IntDis
   Definitions
      At line 71 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 43 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000004

Symbol: CPU_IntEn
   Definitions
      At line 76 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 44 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: CPU_IntEn used once
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 166 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 39 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 181 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 40 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 154 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 155 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 00000016

Symbol: OSStartHighRdy
   Definitions
      At line 136 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 38 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 0000004A

Symbol: OS_CPU_PendSVHandler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 222 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 41 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 0000005E

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 235 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 225 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000010

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 117 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 37 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000008

Symbol: OS_CPU_SR_Save
   Definitions
      At line 112 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 36 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 49 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 148 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 167 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 182 in file ..\uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 52 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 149 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 168 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 183 in file ..\uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 51 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 138 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 50 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 137 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 31 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 27 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 241 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 28 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 242 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 26 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 144 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 29 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 230 in file ..\uCOS-II\Ports\os_cpu_a.asm
      At line 246 in file ..\uCOS-II\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 30 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 247 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file ..\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 237 in file ..\uCOS-II\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
358 symbols in table
